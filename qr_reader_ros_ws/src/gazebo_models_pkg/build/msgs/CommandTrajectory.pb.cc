// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommandTrajectory.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommandTrajectory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mav_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* CommandTrajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandTrajectory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CommandTrajectory_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_CommandTrajectory_2eproto() {
  protobuf_AddDesc_CommandTrajectory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CommandTrajectory.proto");
  GOOGLE_CHECK(file != NULL);
  CommandTrajectory_descriptor_ = file->message_type(0);
  static const int CommandTrajectory_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTrajectory, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTrajectory, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTrajectory, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTrajectory, jerk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTrajectory, snap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTrajectory, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTrajectory, yaw_rate_),
  };
  CommandTrajectory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommandTrajectory_descriptor_,
      CommandTrajectory::default_instance_,
      CommandTrajectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTrajectory, _has_bits_[0]),
      -1,
      -1,
      sizeof(CommandTrajectory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTrajectory, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CommandTrajectory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommandTrajectory_descriptor_, &CommandTrajectory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CommandTrajectory_2eproto() {
  delete CommandTrajectory::default_instance_;
  delete CommandTrajectory_reflection_;
}

void protobuf_AddDesc_CommandTrajectory_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_CommandTrajectory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027CommandTrajectory.proto\022\rmav_msgs.msgs"
    "\032\016vector3d.proto\"\373\001\n\021CommandTrajectory\022\'"
    "\n\010position\030\001 \002(\0132\025.gazebo.msgs.Vector3d\022"
    "\'\n\010velocity\030\002 \002(\0132\025.gazebo.msgs.Vector3d"
    "\022+\n\014acceleration\030\003 \002(\0132\025.gazebo.msgs.Vec"
    "tor3d\022#\n\004jerk\030\004 \002(\0132\025.gazebo.msgs.Vector"
    "3d\022#\n\004snap\030\005 \002(\0132\025.gazebo.msgs.Vector3d\022"
    "\013\n\003yaw\030\006 \002(\002\022\020\n\010yaw_rate\030\007 \002(\002", 310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommandTrajectory.proto", &protobuf_RegisterTypes);
  CommandTrajectory::default_instance_ = new CommandTrajectory();
  CommandTrajectory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CommandTrajectory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CommandTrajectory_2eproto {
  StaticDescriptorInitializer_CommandTrajectory_2eproto() {
    protobuf_AddDesc_CommandTrajectory_2eproto();
  }
} static_descriptor_initializer_CommandTrajectory_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandTrajectory::kPositionFieldNumber;
const int CommandTrajectory::kVelocityFieldNumber;
const int CommandTrajectory::kAccelerationFieldNumber;
const int CommandTrajectory::kJerkFieldNumber;
const int CommandTrajectory::kSnapFieldNumber;
const int CommandTrajectory::kYawFieldNumber;
const int CommandTrajectory::kYawRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandTrajectory::CommandTrajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mav_msgs.msgs.CommandTrajectory)
}

void CommandTrajectory::InitAsDefaultInstance() {
  position_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  acceleration_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  jerk_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  snap_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
}

CommandTrajectory::CommandTrajectory(const CommandTrajectory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mav_msgs.msgs.CommandTrajectory)
}

void CommandTrajectory::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  velocity_ = NULL;
  acceleration_ = NULL;
  jerk_ = NULL;
  snap_ = NULL;
  yaw_ = 0;
  yaw_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandTrajectory::~CommandTrajectory() {
  // @@protoc_insertion_point(destructor:mav_msgs.msgs.CommandTrajectory)
  SharedDtor();
}

void CommandTrajectory::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
    delete acceleration_;
    delete jerk_;
    delete snap_;
  }
}

void CommandTrajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandTrajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandTrajectory_descriptor_;
}

const CommandTrajectory& CommandTrajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommandTrajectory_2eproto();
  return *default_instance_;
}

CommandTrajectory* CommandTrajectory::default_instance_ = NULL;

CommandTrajectory* CommandTrajectory::New(::google::protobuf::Arena* arena) const {
  CommandTrajectory* n = new CommandTrajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommandTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:mav_msgs.msgs.CommandTrajectory)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CommandTrajectory, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CommandTrajectory*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(yaw_, yaw_rate_);
    if (has_position()) {
      if (position_ != NULL) position_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_acceleration()) {
      if (acceleration_ != NULL) acceleration_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_jerk()) {
      if (jerk_ != NULL) jerk_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_snap()) {
      if (snap_ != NULL) snap_->::gazebo::msgs::Vector3d::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CommandTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mav_msgs.msgs.CommandTrajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Vector3d position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_velocity;
        break;
      }

      // required .gazebo.msgs.Vector3d velocity = 2;
      case 2: {
        if (tag == 18) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_acceleration;
        break;
      }

      // required .gazebo.msgs.Vector3d acceleration = 3;
      case 3: {
        if (tag == 26) {
         parse_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_jerk;
        break;
      }

      // required .gazebo.msgs.Vector3d jerk = 4;
      case 4: {
        if (tag == 34) {
         parse_jerk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jerk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_snap;
        break;
      }

      // required .gazebo.msgs.Vector3d snap = 5;
      case 5: {
        if (tag == 42) {
         parse_snap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_yaw;
        break;
      }

      // required float yaw = 6;
      case 6: {
        if (tag == 53) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_yaw_rate;
        break;
      }

      // required float yaw_rate = 7;
      case 7: {
        if (tag == 61) {
         parse_yaw_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
          set_has_yaw_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mav_msgs.msgs.CommandTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mav_msgs.msgs.CommandTrajectory)
  return false;
#undef DO_
}

void CommandTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mav_msgs.msgs.CommandTrajectory)
  // required .gazebo.msgs.Vector3d position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // required .gazebo.msgs.Vector3d velocity = 2;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->velocity_, output);
  }

  // required .gazebo.msgs.Vector3d acceleration = 3;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->acceleration_, output);
  }

  // required .gazebo.msgs.Vector3d jerk = 4;
  if (has_jerk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->jerk_, output);
  }

  // required .gazebo.msgs.Vector3d snap = 5;
  if (has_snap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->snap_, output);
  }

  // required float yaw = 6;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yaw(), output);
  }

  // required float yaw_rate = 7;
  if (has_yaw_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->yaw_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mav_msgs.msgs.CommandTrajectory)
}

::google::protobuf::uint8* CommandTrajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mav_msgs.msgs.CommandTrajectory)
  // required .gazebo.msgs.Vector3d position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, false, target);
  }

  // required .gazebo.msgs.Vector3d velocity = 2;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->velocity_, false, target);
  }

  // required .gazebo.msgs.Vector3d acceleration = 3;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->acceleration_, false, target);
  }

  // required .gazebo.msgs.Vector3d jerk = 4;
  if (has_jerk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->jerk_, false, target);
  }

  // required .gazebo.msgs.Vector3d snap = 5;
  if (has_snap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->snap_, false, target);
  }

  // required float yaw = 6;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->yaw(), target);
  }

  // required float yaw_rate = 7;
  if (has_yaw_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->yaw_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mav_msgs.msgs.CommandTrajectory)
  return target;
}

int CommandTrajectory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mav_msgs.msgs.CommandTrajectory)
  int total_size = 0;

  if (has_position()) {
    // required .gazebo.msgs.Vector3d position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  if (has_velocity()) {
    // required .gazebo.msgs.Vector3d velocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);
  }

  if (has_acceleration()) {
    // required .gazebo.msgs.Vector3d acceleration = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acceleration_);
  }

  if (has_jerk()) {
    // required .gazebo.msgs.Vector3d jerk = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->jerk_);
  }

  if (has_snap()) {
    // required .gazebo.msgs.Vector3d snap = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snap_);
  }

  if (has_yaw()) {
    // required float yaw = 6;
    total_size += 1 + 4;
  }

  if (has_yaw_rate()) {
    // required float yaw_rate = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
int CommandTrajectory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mav_msgs.msgs.CommandTrajectory)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Vector3d position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);

    // required .gazebo.msgs.Vector3d velocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);

    // required .gazebo.msgs.Vector3d acceleration = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acceleration_);

    // required .gazebo.msgs.Vector3d jerk = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->jerk_);

    // required .gazebo.msgs.Vector3d snap = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snap_);

    // required float yaw = 6;
    total_size += 1 + 4;

    // required float yaw_rate = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mav_msgs.msgs.CommandTrajectory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommandTrajectory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandTrajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mav_msgs.msgs.CommandTrajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mav_msgs.msgs.CommandTrajectory)
    MergeFrom(*source);
  }
}

void CommandTrajectory::MergeFrom(const CommandTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mav_msgs.msgs.CommandTrajectory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::gazebo::msgs::Vector3d::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from.velocity());
    }
    if (from.has_acceleration()) {
      mutable_acceleration()->::gazebo::msgs::Vector3d::MergeFrom(from.acceleration());
    }
    if (from.has_jerk()) {
      mutable_jerk()->::gazebo::msgs::Vector3d::MergeFrom(from.jerk());
    }
    if (from.has_snap()) {
      mutable_snap()->::gazebo::msgs::Vector3d::MergeFrom(from.snap());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_yaw_rate()) {
      set_yaw_rate(from.yaw_rate());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CommandTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mav_msgs.msgs.CommandTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandTrajectory::CopyFrom(const CommandTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mav_msgs.msgs.CommandTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTrajectory::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity_->IsInitialized()) return false;
  }
  if (has_acceleration()) {
    if (!this->acceleration_->IsInitialized()) return false;
  }
  if (has_jerk()) {
    if (!this->jerk_->IsInitialized()) return false;
  }
  if (has_snap()) {
    if (!this->snap_->IsInitialized()) return false;
  }
  return true;
}

void CommandTrajectory::Swap(CommandTrajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandTrajectory::InternalSwap(CommandTrajectory* other) {
  std::swap(position_, other->position_);
  std::swap(velocity_, other->velocity_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(jerk_, other->jerk_);
  std::swap(snap_, other->snap_);
  std::swap(yaw_, other->yaw_);
  std::swap(yaw_rate_, other->yaw_rate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommandTrajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandTrajectory_descriptor_;
  metadata.reflection = CommandTrajectory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommandTrajectory

// required .gazebo.msgs.Vector3d position = 1;
bool CommandTrajectory::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommandTrajectory::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void CommandTrajectory::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommandTrajectory::clear_position() {
  if (position_ != NULL) position_->::gazebo::msgs::Vector3d::Clear();
  clear_has_position();
}
const ::gazebo::msgs::Vector3d& CommandTrajectory::position() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.CommandTrajectory.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::gazebo::msgs::Vector3d* CommandTrajectory::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:mav_msgs.msgs.CommandTrajectory.position)
  return position_;
}
::gazebo::msgs::Vector3d* CommandTrajectory::release_position() {
  // @@protoc_insertion_point(field_release:mav_msgs.msgs.CommandTrajectory.position)
  clear_has_position();
  ::gazebo::msgs::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
void CommandTrajectory::set_allocated_position(::gazebo::msgs::Vector3d* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:mav_msgs.msgs.CommandTrajectory.position)
}

// required .gazebo.msgs.Vector3d velocity = 2;
bool CommandTrajectory::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommandTrajectory::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void CommandTrajectory::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommandTrajectory::clear_velocity() {
  if (velocity_ != NULL) velocity_->::gazebo::msgs::Vector3d::Clear();
  clear_has_velocity();
}
const ::gazebo::msgs::Vector3d& CommandTrajectory::velocity() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.CommandTrajectory.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
::gazebo::msgs::Vector3d* CommandTrajectory::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:mav_msgs.msgs.CommandTrajectory.velocity)
  return velocity_;
}
::gazebo::msgs::Vector3d* CommandTrajectory::release_velocity() {
  // @@protoc_insertion_point(field_release:mav_msgs.msgs.CommandTrajectory.velocity)
  clear_has_velocity();
  ::gazebo::msgs::Vector3d* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void CommandTrajectory::set_allocated_velocity(::gazebo::msgs::Vector3d* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:mav_msgs.msgs.CommandTrajectory.velocity)
}

// required .gazebo.msgs.Vector3d acceleration = 3;
bool CommandTrajectory::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CommandTrajectory::set_has_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
void CommandTrajectory::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
void CommandTrajectory::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::gazebo::msgs::Vector3d::Clear();
  clear_has_acceleration();
}
const ::gazebo::msgs::Vector3d& CommandTrajectory::acceleration() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.CommandTrajectory.acceleration)
  return acceleration_ != NULL ? *acceleration_ : *default_instance_->acceleration_;
}
::gazebo::msgs::Vector3d* CommandTrajectory::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) {
    acceleration_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:mav_msgs.msgs.CommandTrajectory.acceleration)
  return acceleration_;
}
::gazebo::msgs::Vector3d* CommandTrajectory::release_acceleration() {
  // @@protoc_insertion_point(field_release:mav_msgs.msgs.CommandTrajectory.acceleration)
  clear_has_acceleration();
  ::gazebo::msgs::Vector3d* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
void CommandTrajectory::set_allocated_acceleration(::gazebo::msgs::Vector3d* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:mav_msgs.msgs.CommandTrajectory.acceleration)
}

// required .gazebo.msgs.Vector3d jerk = 4;
bool CommandTrajectory::has_jerk() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CommandTrajectory::set_has_jerk() {
  _has_bits_[0] |= 0x00000008u;
}
void CommandTrajectory::clear_has_jerk() {
  _has_bits_[0] &= ~0x00000008u;
}
void CommandTrajectory::clear_jerk() {
  if (jerk_ != NULL) jerk_->::gazebo::msgs::Vector3d::Clear();
  clear_has_jerk();
}
const ::gazebo::msgs::Vector3d& CommandTrajectory::jerk() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.CommandTrajectory.jerk)
  return jerk_ != NULL ? *jerk_ : *default_instance_->jerk_;
}
::gazebo::msgs::Vector3d* CommandTrajectory::mutable_jerk() {
  set_has_jerk();
  if (jerk_ == NULL) {
    jerk_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:mav_msgs.msgs.CommandTrajectory.jerk)
  return jerk_;
}
::gazebo::msgs::Vector3d* CommandTrajectory::release_jerk() {
  // @@protoc_insertion_point(field_release:mav_msgs.msgs.CommandTrajectory.jerk)
  clear_has_jerk();
  ::gazebo::msgs::Vector3d* temp = jerk_;
  jerk_ = NULL;
  return temp;
}
void CommandTrajectory::set_allocated_jerk(::gazebo::msgs::Vector3d* jerk) {
  delete jerk_;
  jerk_ = jerk;
  if (jerk) {
    set_has_jerk();
  } else {
    clear_has_jerk();
  }
  // @@protoc_insertion_point(field_set_allocated:mav_msgs.msgs.CommandTrajectory.jerk)
}

// required .gazebo.msgs.Vector3d snap = 5;
bool CommandTrajectory::has_snap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CommandTrajectory::set_has_snap() {
  _has_bits_[0] |= 0x00000010u;
}
void CommandTrajectory::clear_has_snap() {
  _has_bits_[0] &= ~0x00000010u;
}
void CommandTrajectory::clear_snap() {
  if (snap_ != NULL) snap_->::gazebo::msgs::Vector3d::Clear();
  clear_has_snap();
}
const ::gazebo::msgs::Vector3d& CommandTrajectory::snap() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.CommandTrajectory.snap)
  return snap_ != NULL ? *snap_ : *default_instance_->snap_;
}
::gazebo::msgs::Vector3d* CommandTrajectory::mutable_snap() {
  set_has_snap();
  if (snap_ == NULL) {
    snap_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:mav_msgs.msgs.CommandTrajectory.snap)
  return snap_;
}
::gazebo::msgs::Vector3d* CommandTrajectory::release_snap() {
  // @@protoc_insertion_point(field_release:mav_msgs.msgs.CommandTrajectory.snap)
  clear_has_snap();
  ::gazebo::msgs::Vector3d* temp = snap_;
  snap_ = NULL;
  return temp;
}
void CommandTrajectory::set_allocated_snap(::gazebo::msgs::Vector3d* snap) {
  delete snap_;
  snap_ = snap;
  if (snap) {
    set_has_snap();
  } else {
    clear_has_snap();
  }
  // @@protoc_insertion_point(field_set_allocated:mav_msgs.msgs.CommandTrajectory.snap)
}

// required float yaw = 6;
bool CommandTrajectory::has_yaw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CommandTrajectory::set_has_yaw() {
  _has_bits_[0] |= 0x00000020u;
}
void CommandTrajectory::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000020u;
}
void CommandTrajectory::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
 float CommandTrajectory::yaw() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.CommandTrajectory.yaw)
  return yaw_;
}
 void CommandTrajectory::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:mav_msgs.msgs.CommandTrajectory.yaw)
}

// required float yaw_rate = 7;
bool CommandTrajectory::has_yaw_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CommandTrajectory::set_has_yaw_rate() {
  _has_bits_[0] |= 0x00000040u;
}
void CommandTrajectory::clear_has_yaw_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
void CommandTrajectory::clear_yaw_rate() {
  yaw_rate_ = 0;
  clear_has_yaw_rate();
}
 float CommandTrajectory::yaw_rate() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.CommandTrajectory.yaw_rate)
  return yaw_rate_;
}
 void CommandTrajectory::set_yaw_rate(float value) {
  set_has_yaw_rate();
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:mav_msgs.msgs.CommandTrajectory.yaw_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace mav_msgs

// @@protoc_insertion_point(global_scope)
