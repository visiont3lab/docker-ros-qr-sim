// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HilControl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HilControl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mavlink {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* HilControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HilControl_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HilControl_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_HilControl_2eproto() {
  protobuf_AddDesc_HilControl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HilControl.proto");
  GOOGLE_CHECK(file != NULL);
  HilControl_descriptor_ = file->message_type(0);
  static const int HilControl_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, roll_ailerons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, pitch_elevator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, yaw_rudder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, throttle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, aux1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, aux2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, aux3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, aux4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, nav_mode_),
  };
  HilControl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HilControl_descriptor_,
      HilControl::default_instance_,
      HilControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, _has_bits_[0]),
      -1,
      -1,
      sizeof(HilControl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HilControl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HilControl_descriptor_, &HilControl::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HilControl_2eproto() {
  delete HilControl::default_instance_;
  delete HilControl_reflection_;
}

void protobuf_AddDesc_HilControl_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_HilControl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020HilControl.proto\022\014mavlink.msgs\"\314\001\n\nHil"
    "Control\022\021\n\ttime_usec\030\001 \002(\004\022\025\n\rroll_ailer"
    "ons\030\002 \002(\002\022\026\n\016pitch_elevator\030\003 \002(\002\022\022\n\nyaw"
    "_rudder\030\004 \002(\002\022\020\n\010throttle\030\005 \002(\002\022\014\n\004aux1\030"
    "\006 \001(\002\022\014\n\004aux2\030\007 \001(\002\022\014\n\004aux3\030\010 \001(\002\022\014\n\004aux"
    "4\030\t \001(\002\022\014\n\004mode\030\n \002(\r\022\020\n\010nav_mode\030\013 \002(\r", 239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HilControl.proto", &protobuf_RegisterTypes);
  HilControl::default_instance_ = new HilControl();
  HilControl::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HilControl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HilControl_2eproto {
  StaticDescriptorInitializer_HilControl_2eproto() {
    protobuf_AddDesc_HilControl_2eproto();
  }
} static_descriptor_initializer_HilControl_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HilControl::kTimeUsecFieldNumber;
const int HilControl::kRollAileronsFieldNumber;
const int HilControl::kPitchElevatorFieldNumber;
const int HilControl::kYawRudderFieldNumber;
const int HilControl::kThrottleFieldNumber;
const int HilControl::kAux1FieldNumber;
const int HilControl::kAux2FieldNumber;
const int HilControl::kAux3FieldNumber;
const int HilControl::kAux4FieldNumber;
const int HilControl::kModeFieldNumber;
const int HilControl::kNavModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HilControl::HilControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavlink.msgs.HilControl)
}

void HilControl::InitAsDefaultInstance() {
}

HilControl::HilControl(const HilControl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mavlink.msgs.HilControl)
}

void HilControl::SharedCtor() {
  _cached_size_ = 0;
  time_usec_ = GOOGLE_ULONGLONG(0);
  roll_ailerons_ = 0;
  pitch_elevator_ = 0;
  yaw_rudder_ = 0;
  throttle_ = 0;
  aux1_ = 0;
  aux2_ = 0;
  aux3_ = 0;
  aux4_ = 0;
  mode_ = 0u;
  nav_mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HilControl::~HilControl() {
  // @@protoc_insertion_point(destructor:mavlink.msgs.HilControl)
  SharedDtor();
}

void HilControl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HilControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HilControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HilControl_descriptor_;
}

const HilControl& HilControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HilControl_2eproto();
  return *default_instance_;
}

HilControl* HilControl::default_instance_ = NULL;

HilControl* HilControl::New(::google::protobuf::Arena* arena) const {
  HilControl* n = new HilControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HilControl::Clear() {
// @@protoc_insertion_point(message_clear_start:mavlink.msgs.HilControl)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HilControl, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HilControl*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(time_usec_, aux3_);
  }
  ZR_(aux4_, nav_mode_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HilControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavlink.msgs.HilControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time_usec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_usec_)));
          set_has_time_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_roll_ailerons;
        break;
      }

      // required float roll_ailerons = 2;
      case 2: {
        if (tag == 21) {
         parse_roll_ailerons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_ailerons_)));
          set_has_roll_ailerons();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_pitch_elevator;
        break;
      }

      // required float pitch_elevator = 3;
      case 3: {
        if (tag == 29) {
         parse_pitch_elevator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_elevator_)));
          set_has_pitch_elevator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_yaw_rudder;
        break;
      }

      // required float yaw_rudder = 4;
      case 4: {
        if (tag == 37) {
         parse_yaw_rudder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rudder_)));
          set_has_yaw_rudder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_throttle;
        break;
      }

      // required float throttle = 5;
      case 5: {
        if (tag == 45) {
         parse_throttle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_)));
          set_has_throttle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_aux1;
        break;
      }

      // optional float aux1 = 6;
      case 6: {
        if (tag == 53) {
         parse_aux1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aux1_)));
          set_has_aux1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_aux2;
        break;
      }

      // optional float aux2 = 7;
      case 7: {
        if (tag == 61) {
         parse_aux2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aux2_)));
          set_has_aux2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_aux3;
        break;
      }

      // optional float aux3 = 8;
      case 8: {
        if (tag == 69) {
         parse_aux3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aux3_)));
          set_has_aux3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_aux4;
        break;
      }

      // optional float aux4 = 9;
      case 9: {
        if (tag == 77) {
         parse_aux4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aux4_)));
          set_has_aux4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mode;
        break;
      }

      // required uint32 mode = 10;
      case 10: {
        if (tag == 80) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_nav_mode;
        break;
      }

      // required uint32 nav_mode = 11;
      case 11: {
        if (tag == 88) {
         parse_nav_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nav_mode_)));
          set_has_nav_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavlink.msgs.HilControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavlink.msgs.HilControl)
  return false;
#undef DO_
}

void HilControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavlink.msgs.HilControl)
  // required uint64 time_usec = 1;
  if (has_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_usec(), output);
  }

  // required float roll_ailerons = 2;
  if (has_roll_ailerons()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->roll_ailerons(), output);
  }

  // required float pitch_elevator = 3;
  if (has_pitch_elevator()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch_elevator(), output);
  }

  // required float yaw_rudder = 4;
  if (has_yaw_rudder()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yaw_rudder(), output);
  }

  // required float throttle = 5;
  if (has_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->throttle(), output);
  }

  // optional float aux1 = 6;
  if (has_aux1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->aux1(), output);
  }

  // optional float aux2 = 7;
  if (has_aux2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->aux2(), output);
  }

  // optional float aux3 = 8;
  if (has_aux3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->aux3(), output);
  }

  // optional float aux4 = 9;
  if (has_aux4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->aux4(), output);
  }

  // required uint32 mode = 10;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->mode(), output);
  }

  // required uint32 nav_mode = 11;
  if (has_nav_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->nav_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavlink.msgs.HilControl)
}

::google::protobuf::uint8* HilControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavlink.msgs.HilControl)
  // required uint64 time_usec = 1;
  if (has_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_usec(), target);
  }

  // required float roll_ailerons = 2;
  if (has_roll_ailerons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->roll_ailerons(), target);
  }

  // required float pitch_elevator = 3;
  if (has_pitch_elevator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pitch_elevator(), target);
  }

  // required float yaw_rudder = 4;
  if (has_yaw_rudder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yaw_rudder(), target);
  }

  // required float throttle = 5;
  if (has_throttle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->throttle(), target);
  }

  // optional float aux1 = 6;
  if (has_aux1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->aux1(), target);
  }

  // optional float aux2 = 7;
  if (has_aux2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->aux2(), target);
  }

  // optional float aux3 = 8;
  if (has_aux3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->aux3(), target);
  }

  // optional float aux4 = 9;
  if (has_aux4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->aux4(), target);
  }

  // required uint32 mode = 10;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->mode(), target);
  }

  // required uint32 nav_mode = 11;
  if (has_nav_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->nav_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavlink.msgs.HilControl)
  return target;
}

int HilControl::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mavlink.msgs.HilControl)
  int total_size = 0;

  if (has_time_usec()) {
    // required uint64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_usec());
  }

  if (has_roll_ailerons()) {
    // required float roll_ailerons = 2;
    total_size += 1 + 4;
  }

  if (has_pitch_elevator()) {
    // required float pitch_elevator = 3;
    total_size += 1 + 4;
  }

  if (has_yaw_rudder()) {
    // required float yaw_rudder = 4;
    total_size += 1 + 4;
  }

  if (has_throttle()) {
    // required float throttle = 5;
    total_size += 1 + 4;
  }

  if (has_mode()) {
    // required uint32 mode = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mode());
  }

  if (has_nav_mode()) {
    // required uint32 nav_mode = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nav_mode());
  }

  return total_size;
}
int HilControl::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mavlink.msgs.HilControl)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000061f) ^ 0x0000061f) == 0) {  // All required fields are present.
    // required uint64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_usec());

    // required float roll_ailerons = 2;
    total_size += 1 + 4;

    // required float pitch_elevator = 3;
    total_size += 1 + 4;

    // required float yaw_rudder = 4;
    total_size += 1 + 4;

    // required float throttle = 5;
    total_size += 1 + 4;

    // required uint32 mode = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mode());

    // required uint32 nav_mode = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nav_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 224u) {
    // optional float aux1 = 6;
    if (has_aux1()) {
      total_size += 1 + 4;
    }

    // optional float aux2 = 7;
    if (has_aux2()) {
      total_size += 1 + 4;
    }

    // optional float aux3 = 8;
    if (has_aux3()) {
      total_size += 1 + 4;
    }

  }
  // optional float aux4 = 9;
  if (has_aux4()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HilControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavlink.msgs.HilControl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HilControl* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HilControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavlink.msgs.HilControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavlink.msgs.HilControl)
    MergeFrom(*source);
  }
}

void HilControl::MergeFrom(const HilControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavlink.msgs.HilControl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_usec()) {
      set_time_usec(from.time_usec());
    }
    if (from.has_roll_ailerons()) {
      set_roll_ailerons(from.roll_ailerons());
    }
    if (from.has_pitch_elevator()) {
      set_pitch_elevator(from.pitch_elevator());
    }
    if (from.has_yaw_rudder()) {
      set_yaw_rudder(from.yaw_rudder());
    }
    if (from.has_throttle()) {
      set_throttle(from.throttle());
    }
    if (from.has_aux1()) {
      set_aux1(from.aux1());
    }
    if (from.has_aux2()) {
      set_aux2(from.aux2());
    }
    if (from.has_aux3()) {
      set_aux3(from.aux3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_aux4()) {
      set_aux4(from.aux4());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_nav_mode()) {
      set_nav_mode(from.nav_mode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HilControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavlink.msgs.HilControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HilControl::CopyFrom(const HilControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavlink.msgs.HilControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HilControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000061f) != 0x0000061f) return false;

  return true;
}

void HilControl::Swap(HilControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HilControl::InternalSwap(HilControl* other) {
  std::swap(time_usec_, other->time_usec_);
  std::swap(roll_ailerons_, other->roll_ailerons_);
  std::swap(pitch_elevator_, other->pitch_elevator_);
  std::swap(yaw_rudder_, other->yaw_rudder_);
  std::swap(throttle_, other->throttle_);
  std::swap(aux1_, other->aux1_);
  std::swap(aux2_, other->aux2_);
  std::swap(aux3_, other->aux3_);
  std::swap(aux4_, other->aux4_);
  std::swap(mode_, other->mode_);
  std::swap(nav_mode_, other->nav_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HilControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HilControl_descriptor_;
  metadata.reflection = HilControl_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HilControl

// required uint64 time_usec = 1;
bool HilControl::has_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HilControl::set_has_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
void HilControl::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
void HilControl::clear_time_usec() {
  time_usec_ = GOOGLE_ULONGLONG(0);
  clear_has_time_usec();
}
 ::google::protobuf::uint64 HilControl::time_usec() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilControl.time_usec)
  return time_usec_;
}
 void HilControl::set_time_usec(::google::protobuf::uint64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilControl.time_usec)
}

// required float roll_ailerons = 2;
bool HilControl::has_roll_ailerons() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HilControl::set_has_roll_ailerons() {
  _has_bits_[0] |= 0x00000002u;
}
void HilControl::clear_has_roll_ailerons() {
  _has_bits_[0] &= ~0x00000002u;
}
void HilControl::clear_roll_ailerons() {
  roll_ailerons_ = 0;
  clear_has_roll_ailerons();
}
 float HilControl::roll_ailerons() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilControl.roll_ailerons)
  return roll_ailerons_;
}
 void HilControl::set_roll_ailerons(float value) {
  set_has_roll_ailerons();
  roll_ailerons_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilControl.roll_ailerons)
}

// required float pitch_elevator = 3;
bool HilControl::has_pitch_elevator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HilControl::set_has_pitch_elevator() {
  _has_bits_[0] |= 0x00000004u;
}
void HilControl::clear_has_pitch_elevator() {
  _has_bits_[0] &= ~0x00000004u;
}
void HilControl::clear_pitch_elevator() {
  pitch_elevator_ = 0;
  clear_has_pitch_elevator();
}
 float HilControl::pitch_elevator() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilControl.pitch_elevator)
  return pitch_elevator_;
}
 void HilControl::set_pitch_elevator(float value) {
  set_has_pitch_elevator();
  pitch_elevator_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilControl.pitch_elevator)
}

// required float yaw_rudder = 4;
bool HilControl::has_yaw_rudder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HilControl::set_has_yaw_rudder() {
  _has_bits_[0] |= 0x00000008u;
}
void HilControl::clear_has_yaw_rudder() {
  _has_bits_[0] &= ~0x00000008u;
}
void HilControl::clear_yaw_rudder() {
  yaw_rudder_ = 0;
  clear_has_yaw_rudder();
}
 float HilControl::yaw_rudder() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilControl.yaw_rudder)
  return yaw_rudder_;
}
 void HilControl::set_yaw_rudder(float value) {
  set_has_yaw_rudder();
  yaw_rudder_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilControl.yaw_rudder)
}

// required float throttle = 5;
bool HilControl::has_throttle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HilControl::set_has_throttle() {
  _has_bits_[0] |= 0x00000010u;
}
void HilControl::clear_has_throttle() {
  _has_bits_[0] &= ~0x00000010u;
}
void HilControl::clear_throttle() {
  throttle_ = 0;
  clear_has_throttle();
}
 float HilControl::throttle() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilControl.throttle)
  return throttle_;
}
 void HilControl::set_throttle(float value) {
  set_has_throttle();
  throttle_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilControl.throttle)
}

// optional float aux1 = 6;
bool HilControl::has_aux1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void HilControl::set_has_aux1() {
  _has_bits_[0] |= 0x00000020u;
}
void HilControl::clear_has_aux1() {
  _has_bits_[0] &= ~0x00000020u;
}
void HilControl::clear_aux1() {
  aux1_ = 0;
  clear_has_aux1();
}
 float HilControl::aux1() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilControl.aux1)
  return aux1_;
}
 void HilControl::set_aux1(float value) {
  set_has_aux1();
  aux1_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilControl.aux1)
}

// optional float aux2 = 7;
bool HilControl::has_aux2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void HilControl::set_has_aux2() {
  _has_bits_[0] |= 0x00000040u;
}
void HilControl::clear_has_aux2() {
  _has_bits_[0] &= ~0x00000040u;
}
void HilControl::clear_aux2() {
  aux2_ = 0;
  clear_has_aux2();
}
 float HilControl::aux2() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilControl.aux2)
  return aux2_;
}
 void HilControl::set_aux2(float value) {
  set_has_aux2();
  aux2_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilControl.aux2)
}

// optional float aux3 = 8;
bool HilControl::has_aux3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void HilControl::set_has_aux3() {
  _has_bits_[0] |= 0x00000080u;
}
void HilControl::clear_has_aux3() {
  _has_bits_[0] &= ~0x00000080u;
}
void HilControl::clear_aux3() {
  aux3_ = 0;
  clear_has_aux3();
}
 float HilControl::aux3() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilControl.aux3)
  return aux3_;
}
 void HilControl::set_aux3(float value) {
  set_has_aux3();
  aux3_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilControl.aux3)
}

// optional float aux4 = 9;
bool HilControl::has_aux4() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void HilControl::set_has_aux4() {
  _has_bits_[0] |= 0x00000100u;
}
void HilControl::clear_has_aux4() {
  _has_bits_[0] &= ~0x00000100u;
}
void HilControl::clear_aux4() {
  aux4_ = 0;
  clear_has_aux4();
}
 float HilControl::aux4() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilControl.aux4)
  return aux4_;
}
 void HilControl::set_aux4(float value) {
  set_has_aux4();
  aux4_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilControl.aux4)
}

// required uint32 mode = 10;
bool HilControl::has_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void HilControl::set_has_mode() {
  _has_bits_[0] |= 0x00000200u;
}
void HilControl::clear_has_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
void HilControl::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
 ::google::protobuf::uint32 HilControl::mode() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilControl.mode)
  return mode_;
}
 void HilControl::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilControl.mode)
}

// required uint32 nav_mode = 11;
bool HilControl::has_nav_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void HilControl::set_has_nav_mode() {
  _has_bits_[0] |= 0x00000400u;
}
void HilControl::clear_has_nav_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
void HilControl::clear_nav_mode() {
  nav_mode_ = 0u;
  clear_has_nav_mode();
}
 ::google::protobuf::uint32 HilControl::nav_mode() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilControl.nav_mode)
  return nav_mode_;
}
 void HilControl::set_nav_mode(::google::protobuf::uint32 value) {
  set_has_nav_mode();
  nav_mode_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilControl.nav_mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace mavlink

// @@protoc_insertion_point(global_scope)
