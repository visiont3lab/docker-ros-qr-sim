// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommandRollPitchYawrateThrust.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommandRollPitchYawrateThrust.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mav_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* CommandRollPitchYawrateThrust_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRollPitchYawrateThrust_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CommandRollPitchYawrateThrust_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_CommandRollPitchYawrateThrust_2eproto() {
  protobuf_AddDesc_CommandRollPitchYawrateThrust_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CommandRollPitchYawrateThrust.proto");
  GOOGLE_CHECK(file != NULL);
  CommandRollPitchYawrateThrust_descriptor_ = file->message_type(0);
  static const int CommandRollPitchYawrateThrust_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRollPitchYawrateThrust, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRollPitchYawrateThrust, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRollPitchYawrateThrust, yaw_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRollPitchYawrateThrust, thrust_),
  };
  CommandRollPitchYawrateThrust_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommandRollPitchYawrateThrust_descriptor_,
      CommandRollPitchYawrateThrust::default_instance_,
      CommandRollPitchYawrateThrust_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRollPitchYawrateThrust, _has_bits_[0]),
      -1,
      -1,
      sizeof(CommandRollPitchYawrateThrust),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRollPitchYawrateThrust, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CommandRollPitchYawrateThrust_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommandRollPitchYawrateThrust_descriptor_, &CommandRollPitchYawrateThrust::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CommandRollPitchYawrateThrust_2eproto() {
  delete CommandRollPitchYawrateThrust::default_instance_;
  delete CommandRollPitchYawrateThrust_reflection_;
}

void protobuf_AddDesc_CommandRollPitchYawrateThrust_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_CommandRollPitchYawrateThrust_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#CommandRollPitchYawrateThrust.proto\022\rm"
    "av_msgs.msgs\"^\n\035CommandRollPitchYawrateT"
    "hrust\022\014\n\004roll\030\001 \002(\002\022\r\n\005pitch\030\002 \002(\002\022\020\n\010ya"
    "w_rate\030\003 \002(\002\022\016\n\006thrust\030\004 \002(\002", 148);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommandRollPitchYawrateThrust.proto", &protobuf_RegisterTypes);
  CommandRollPitchYawrateThrust::default_instance_ = new CommandRollPitchYawrateThrust();
  CommandRollPitchYawrateThrust::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CommandRollPitchYawrateThrust_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CommandRollPitchYawrateThrust_2eproto {
  StaticDescriptorInitializer_CommandRollPitchYawrateThrust_2eproto() {
    protobuf_AddDesc_CommandRollPitchYawrateThrust_2eproto();
  }
} static_descriptor_initializer_CommandRollPitchYawrateThrust_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandRollPitchYawrateThrust::kRollFieldNumber;
const int CommandRollPitchYawrateThrust::kPitchFieldNumber;
const int CommandRollPitchYawrateThrust::kYawRateFieldNumber;
const int CommandRollPitchYawrateThrust::kThrustFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandRollPitchYawrateThrust::CommandRollPitchYawrateThrust()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mav_msgs.msgs.CommandRollPitchYawrateThrust)
}

void CommandRollPitchYawrateThrust::InitAsDefaultInstance() {
}

CommandRollPitchYawrateThrust::CommandRollPitchYawrateThrust(const CommandRollPitchYawrateThrust& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mav_msgs.msgs.CommandRollPitchYawrateThrust)
}

void CommandRollPitchYawrateThrust::SharedCtor() {
  _cached_size_ = 0;
  roll_ = 0;
  pitch_ = 0;
  yaw_rate_ = 0;
  thrust_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRollPitchYawrateThrust::~CommandRollPitchYawrateThrust() {
  // @@protoc_insertion_point(destructor:mav_msgs.msgs.CommandRollPitchYawrateThrust)
  SharedDtor();
}

void CommandRollPitchYawrateThrust::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandRollPitchYawrateThrust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRollPitchYawrateThrust::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRollPitchYawrateThrust_descriptor_;
}

const CommandRollPitchYawrateThrust& CommandRollPitchYawrateThrust::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommandRollPitchYawrateThrust_2eproto();
  return *default_instance_;
}

CommandRollPitchYawrateThrust* CommandRollPitchYawrateThrust::default_instance_ = NULL;

CommandRollPitchYawrateThrust* CommandRollPitchYawrateThrust::New(::google::protobuf::Arena* arena) const {
  CommandRollPitchYawrateThrust* n = new CommandRollPitchYawrateThrust;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommandRollPitchYawrateThrust::Clear() {
// @@protoc_insertion_point(message_clear_start:mav_msgs.msgs.CommandRollPitchYawrateThrust)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CommandRollPitchYawrateThrust, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CommandRollPitchYawrateThrust*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(roll_, thrust_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CommandRollPitchYawrateThrust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mav_msgs.msgs.CommandRollPitchYawrateThrust)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float roll = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_pitch;
        break;
      }

      // required float pitch = 2;
      case 2: {
        if (tag == 21) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_yaw_rate;
        break;
      }

      // required float yaw_rate = 3;
      case 3: {
        if (tag == 29) {
         parse_yaw_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
          set_has_yaw_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_thrust;
        break;
      }

      // required float thrust = 4;
      case 4: {
        if (tag == 37) {
         parse_thrust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thrust_)));
          set_has_thrust();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mav_msgs.msgs.CommandRollPitchYawrateThrust)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mav_msgs.msgs.CommandRollPitchYawrateThrust)
  return false;
#undef DO_
}

void CommandRollPitchYawrateThrust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mav_msgs.msgs.CommandRollPitchYawrateThrust)
  // required float roll = 1;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->roll(), output);
  }

  // required float pitch = 2;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pitch(), output);
  }

  // required float yaw_rate = 3;
  if (has_yaw_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw_rate(), output);
  }

  // required float thrust = 4;
  if (has_thrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->thrust(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mav_msgs.msgs.CommandRollPitchYawrateThrust)
}

::google::protobuf::uint8* CommandRollPitchYawrateThrust::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mav_msgs.msgs.CommandRollPitchYawrateThrust)
  // required float roll = 1;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->roll(), target);
  }

  // required float pitch = 2;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pitch(), target);
  }

  // required float yaw_rate = 3;
  if (has_yaw_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw_rate(), target);
  }

  // required float thrust = 4;
  if (has_thrust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->thrust(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mav_msgs.msgs.CommandRollPitchYawrateThrust)
  return target;
}

int CommandRollPitchYawrateThrust::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mav_msgs.msgs.CommandRollPitchYawrateThrust)
  int total_size = 0;

  if (has_roll()) {
    // required float roll = 1;
    total_size += 1 + 4;
  }

  if (has_pitch()) {
    // required float pitch = 2;
    total_size += 1 + 4;
  }

  if (has_yaw_rate()) {
    // required float yaw_rate = 3;
    total_size += 1 + 4;
  }

  if (has_thrust()) {
    // required float thrust = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
int CommandRollPitchYawrateThrust::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mav_msgs.msgs.CommandRollPitchYawrateThrust)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float roll = 1;
    total_size += 1 + 4;

    // required float pitch = 2;
    total_size += 1 + 4;

    // required float yaw_rate = 3;
    total_size += 1 + 4;

    // required float thrust = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRollPitchYawrateThrust::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mav_msgs.msgs.CommandRollPitchYawrateThrust)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommandRollPitchYawrateThrust* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandRollPitchYawrateThrust>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mav_msgs.msgs.CommandRollPitchYawrateThrust)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mav_msgs.msgs.CommandRollPitchYawrateThrust)
    MergeFrom(*source);
  }
}

void CommandRollPitchYawrateThrust::MergeFrom(const CommandRollPitchYawrateThrust& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mav_msgs.msgs.CommandRollPitchYawrateThrust)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw_rate()) {
      set_yaw_rate(from.yaw_rate());
    }
    if (from.has_thrust()) {
      set_thrust(from.thrust());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CommandRollPitchYawrateThrust::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mav_msgs.msgs.CommandRollPitchYawrateThrust)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRollPitchYawrateThrust::CopyFrom(const CommandRollPitchYawrateThrust& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mav_msgs.msgs.CommandRollPitchYawrateThrust)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRollPitchYawrateThrust::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CommandRollPitchYawrateThrust::Swap(CommandRollPitchYawrateThrust* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandRollPitchYawrateThrust::InternalSwap(CommandRollPitchYawrateThrust* other) {
  std::swap(roll_, other->roll_);
  std::swap(pitch_, other->pitch_);
  std::swap(yaw_rate_, other->yaw_rate_);
  std::swap(thrust_, other->thrust_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommandRollPitchYawrateThrust::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRollPitchYawrateThrust_descriptor_;
  metadata.reflection = CommandRollPitchYawrateThrust_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommandRollPitchYawrateThrust

// required float roll = 1;
bool CommandRollPitchYawrateThrust::has_roll() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommandRollPitchYawrateThrust::set_has_roll() {
  _has_bits_[0] |= 0x00000001u;
}
void CommandRollPitchYawrateThrust::clear_has_roll() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommandRollPitchYawrateThrust::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
 float CommandRollPitchYawrateThrust::roll() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.CommandRollPitchYawrateThrust.roll)
  return roll_;
}
 void CommandRollPitchYawrateThrust::set_roll(float value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:mav_msgs.msgs.CommandRollPitchYawrateThrust.roll)
}

// required float pitch = 2;
bool CommandRollPitchYawrateThrust::has_pitch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommandRollPitchYawrateThrust::set_has_pitch() {
  _has_bits_[0] |= 0x00000002u;
}
void CommandRollPitchYawrateThrust::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommandRollPitchYawrateThrust::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
 float CommandRollPitchYawrateThrust::pitch() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.CommandRollPitchYawrateThrust.pitch)
  return pitch_;
}
 void CommandRollPitchYawrateThrust::set_pitch(float value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:mav_msgs.msgs.CommandRollPitchYawrateThrust.pitch)
}

// required float yaw_rate = 3;
bool CommandRollPitchYawrateThrust::has_yaw_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CommandRollPitchYawrateThrust::set_has_yaw_rate() {
  _has_bits_[0] |= 0x00000004u;
}
void CommandRollPitchYawrateThrust::clear_has_yaw_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
void CommandRollPitchYawrateThrust::clear_yaw_rate() {
  yaw_rate_ = 0;
  clear_has_yaw_rate();
}
 float CommandRollPitchYawrateThrust::yaw_rate() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.CommandRollPitchYawrateThrust.yaw_rate)
  return yaw_rate_;
}
 void CommandRollPitchYawrateThrust::set_yaw_rate(float value) {
  set_has_yaw_rate();
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:mav_msgs.msgs.CommandRollPitchYawrateThrust.yaw_rate)
}

// required float thrust = 4;
bool CommandRollPitchYawrateThrust::has_thrust() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CommandRollPitchYawrateThrust::set_has_thrust() {
  _has_bits_[0] |= 0x00000008u;
}
void CommandRollPitchYawrateThrust::clear_has_thrust() {
  _has_bits_[0] &= ~0x00000008u;
}
void CommandRollPitchYawrateThrust::clear_thrust() {
  thrust_ = 0;
  clear_has_thrust();
}
 float CommandRollPitchYawrateThrust::thrust() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.CommandRollPitchYawrateThrust.thrust)
  return thrust_;
}
 void CommandRollPitchYawrateThrust::set_thrust(float value) {
  set_has_thrust();
  thrust_ = value;
  // @@protoc_insertion_point(field_set:mav_msgs.msgs.CommandRollPitchYawrateThrust.thrust)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace mav_msgs

// @@protoc_insertion_point(global_scope)
