// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HilSensor.proto

#ifndef PROTOBUF_HilSensor_2eproto__INCLUDED
#define PROTOBUF_HilSensor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mavlink {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_HilSensor_2eproto();
void protobuf_AssignDesc_HilSensor_2eproto();
void protobuf_ShutdownFile_HilSensor_2eproto();

class HilSensor;

// ===================================================================

class HilSensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavlink.msgs.HilSensor) */ {
 public:
  HilSensor();
  virtual ~HilSensor();

  HilSensor(const HilSensor& from);

  inline HilSensor& operator=(const HilSensor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HilSensor& default_instance();

  void Swap(HilSensor* other);

  // implements Message ----------------------------------------------

  inline HilSensor* New() const { return New(NULL); }

  HilSensor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HilSensor& from);
  void MergeFrom(const HilSensor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HilSensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 time_usec = 1;
  bool has_time_usec() const;
  void clear_time_usec();
  static const int kTimeUsecFieldNumber = 1;
  ::google::protobuf::uint64 time_usec() const;
  void set_time_usec(::google::protobuf::uint64 value);

  // required float xacc = 2;
  bool has_xacc() const;
  void clear_xacc();
  static const int kXaccFieldNumber = 2;
  float xacc() const;
  void set_xacc(float value);

  // required float yacc = 3;
  bool has_yacc() const;
  void clear_yacc();
  static const int kYaccFieldNumber = 3;
  float yacc() const;
  void set_yacc(float value);

  // required float zacc = 4;
  bool has_zacc() const;
  void clear_zacc();
  static const int kZaccFieldNumber = 4;
  float zacc() const;
  void set_zacc(float value);

  // required float xgyro = 5;
  bool has_xgyro() const;
  void clear_xgyro();
  static const int kXgyroFieldNumber = 5;
  float xgyro() const;
  void set_xgyro(float value);

  // required float ygyro = 6;
  bool has_ygyro() const;
  void clear_ygyro();
  static const int kYgyroFieldNumber = 6;
  float ygyro() const;
  void set_ygyro(float value);

  // required float zgyro = 7;
  bool has_zgyro() const;
  void clear_zgyro();
  static const int kZgyroFieldNumber = 7;
  float zgyro() const;
  void set_zgyro(float value);

  // required float xmag = 8;
  bool has_xmag() const;
  void clear_xmag();
  static const int kXmagFieldNumber = 8;
  float xmag() const;
  void set_xmag(float value);

  // required float ymag = 9;
  bool has_ymag() const;
  void clear_ymag();
  static const int kYmagFieldNumber = 9;
  float ymag() const;
  void set_ymag(float value);

  // required float zmag = 10;
  bool has_zmag() const;
  void clear_zmag();
  static const int kZmagFieldNumber = 10;
  float zmag() const;
  void set_zmag(float value);

  // required float abs_pressure = 11;
  bool has_abs_pressure() const;
  void clear_abs_pressure();
  static const int kAbsPressureFieldNumber = 11;
  float abs_pressure() const;
  void set_abs_pressure(float value);

  // required float diff_pressure = 12;
  bool has_diff_pressure() const;
  void clear_diff_pressure();
  static const int kDiffPressureFieldNumber = 12;
  float diff_pressure() const;
  void set_diff_pressure(float value);

  // optional float pressure_alt = 13;
  bool has_pressure_alt() const;
  void clear_pressure_alt();
  static const int kPressureAltFieldNumber = 13;
  float pressure_alt() const;
  void set_pressure_alt(float value);

  // optional float temperature = 14;
  bool has_temperature() const;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 14;
  float temperature() const;
  void set_temperature(float value);

  // required uint32 fields_updated = 15;
  bool has_fields_updated() const;
  void clear_fields_updated();
  static const int kFieldsUpdatedFieldNumber = 15;
  ::google::protobuf::uint32 fields_updated() const;
  void set_fields_updated(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mavlink.msgs.HilSensor)
 private:
  inline void set_has_time_usec();
  inline void clear_has_time_usec();
  inline void set_has_xacc();
  inline void clear_has_xacc();
  inline void set_has_yacc();
  inline void clear_has_yacc();
  inline void set_has_zacc();
  inline void clear_has_zacc();
  inline void set_has_xgyro();
  inline void clear_has_xgyro();
  inline void set_has_ygyro();
  inline void clear_has_ygyro();
  inline void set_has_zgyro();
  inline void clear_has_zgyro();
  inline void set_has_xmag();
  inline void clear_has_xmag();
  inline void set_has_ymag();
  inline void clear_has_ymag();
  inline void set_has_zmag();
  inline void clear_has_zmag();
  inline void set_has_abs_pressure();
  inline void clear_has_abs_pressure();
  inline void set_has_diff_pressure();
  inline void clear_has_diff_pressure();
  inline void set_has_pressure_alt();
  inline void clear_has_pressure_alt();
  inline void set_has_temperature();
  inline void clear_has_temperature();
  inline void set_has_fields_updated();
  inline void clear_has_fields_updated();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 time_usec_;
  float xacc_;
  float yacc_;
  float zacc_;
  float xgyro_;
  float ygyro_;
  float zgyro_;
  float xmag_;
  float ymag_;
  float zmag_;
  float abs_pressure_;
  float diff_pressure_;
  float pressure_alt_;
  float temperature_;
  ::google::protobuf::uint32 fields_updated_;
  friend void  protobuf_AddDesc_HilSensor_2eproto();
  friend void protobuf_AssignDesc_HilSensor_2eproto();
  friend void protobuf_ShutdownFile_HilSensor_2eproto();

  void InitAsDefaultInstance();
  static HilSensor* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HilSensor

// required uint64 time_usec = 1;
inline bool HilSensor::has_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HilSensor::set_has_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HilSensor::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HilSensor::clear_time_usec() {
  time_usec_ = GOOGLE_ULONGLONG(0);
  clear_has_time_usec();
}
inline ::google::protobuf::uint64 HilSensor::time_usec() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilSensor.time_usec)
  return time_usec_;
}
inline void HilSensor::set_time_usec(::google::protobuf::uint64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilSensor.time_usec)
}

// required float xacc = 2;
inline bool HilSensor::has_xacc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HilSensor::set_has_xacc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HilSensor::clear_has_xacc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HilSensor::clear_xacc() {
  xacc_ = 0;
  clear_has_xacc();
}
inline float HilSensor::xacc() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilSensor.xacc)
  return xacc_;
}
inline void HilSensor::set_xacc(float value) {
  set_has_xacc();
  xacc_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilSensor.xacc)
}

// required float yacc = 3;
inline bool HilSensor::has_yacc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HilSensor::set_has_yacc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HilSensor::clear_has_yacc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HilSensor::clear_yacc() {
  yacc_ = 0;
  clear_has_yacc();
}
inline float HilSensor::yacc() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilSensor.yacc)
  return yacc_;
}
inline void HilSensor::set_yacc(float value) {
  set_has_yacc();
  yacc_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilSensor.yacc)
}

// required float zacc = 4;
inline bool HilSensor::has_zacc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HilSensor::set_has_zacc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HilSensor::clear_has_zacc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HilSensor::clear_zacc() {
  zacc_ = 0;
  clear_has_zacc();
}
inline float HilSensor::zacc() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilSensor.zacc)
  return zacc_;
}
inline void HilSensor::set_zacc(float value) {
  set_has_zacc();
  zacc_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilSensor.zacc)
}

// required float xgyro = 5;
inline bool HilSensor::has_xgyro() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HilSensor::set_has_xgyro() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HilSensor::clear_has_xgyro() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HilSensor::clear_xgyro() {
  xgyro_ = 0;
  clear_has_xgyro();
}
inline float HilSensor::xgyro() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilSensor.xgyro)
  return xgyro_;
}
inline void HilSensor::set_xgyro(float value) {
  set_has_xgyro();
  xgyro_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilSensor.xgyro)
}

// required float ygyro = 6;
inline bool HilSensor::has_ygyro() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HilSensor::set_has_ygyro() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HilSensor::clear_has_ygyro() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HilSensor::clear_ygyro() {
  ygyro_ = 0;
  clear_has_ygyro();
}
inline float HilSensor::ygyro() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilSensor.ygyro)
  return ygyro_;
}
inline void HilSensor::set_ygyro(float value) {
  set_has_ygyro();
  ygyro_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilSensor.ygyro)
}

// required float zgyro = 7;
inline bool HilSensor::has_zgyro() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HilSensor::set_has_zgyro() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HilSensor::clear_has_zgyro() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HilSensor::clear_zgyro() {
  zgyro_ = 0;
  clear_has_zgyro();
}
inline float HilSensor::zgyro() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilSensor.zgyro)
  return zgyro_;
}
inline void HilSensor::set_zgyro(float value) {
  set_has_zgyro();
  zgyro_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilSensor.zgyro)
}

// required float xmag = 8;
inline bool HilSensor::has_xmag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HilSensor::set_has_xmag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HilSensor::clear_has_xmag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HilSensor::clear_xmag() {
  xmag_ = 0;
  clear_has_xmag();
}
inline float HilSensor::xmag() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilSensor.xmag)
  return xmag_;
}
inline void HilSensor::set_xmag(float value) {
  set_has_xmag();
  xmag_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilSensor.xmag)
}

// required float ymag = 9;
inline bool HilSensor::has_ymag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HilSensor::set_has_ymag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HilSensor::clear_has_ymag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HilSensor::clear_ymag() {
  ymag_ = 0;
  clear_has_ymag();
}
inline float HilSensor::ymag() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilSensor.ymag)
  return ymag_;
}
inline void HilSensor::set_ymag(float value) {
  set_has_ymag();
  ymag_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilSensor.ymag)
}

// required float zmag = 10;
inline bool HilSensor::has_zmag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HilSensor::set_has_zmag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HilSensor::clear_has_zmag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HilSensor::clear_zmag() {
  zmag_ = 0;
  clear_has_zmag();
}
inline float HilSensor::zmag() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilSensor.zmag)
  return zmag_;
}
inline void HilSensor::set_zmag(float value) {
  set_has_zmag();
  zmag_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilSensor.zmag)
}

// required float abs_pressure = 11;
inline bool HilSensor::has_abs_pressure() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HilSensor::set_has_abs_pressure() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HilSensor::clear_has_abs_pressure() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HilSensor::clear_abs_pressure() {
  abs_pressure_ = 0;
  clear_has_abs_pressure();
}
inline float HilSensor::abs_pressure() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilSensor.abs_pressure)
  return abs_pressure_;
}
inline void HilSensor::set_abs_pressure(float value) {
  set_has_abs_pressure();
  abs_pressure_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilSensor.abs_pressure)
}

// required float diff_pressure = 12;
inline bool HilSensor::has_diff_pressure() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HilSensor::set_has_diff_pressure() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HilSensor::clear_has_diff_pressure() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HilSensor::clear_diff_pressure() {
  diff_pressure_ = 0;
  clear_has_diff_pressure();
}
inline float HilSensor::diff_pressure() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilSensor.diff_pressure)
  return diff_pressure_;
}
inline void HilSensor::set_diff_pressure(float value) {
  set_has_diff_pressure();
  diff_pressure_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilSensor.diff_pressure)
}

// optional float pressure_alt = 13;
inline bool HilSensor::has_pressure_alt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void HilSensor::set_has_pressure_alt() {
  _has_bits_[0] |= 0x00001000u;
}
inline void HilSensor::clear_has_pressure_alt() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void HilSensor::clear_pressure_alt() {
  pressure_alt_ = 0;
  clear_has_pressure_alt();
}
inline float HilSensor::pressure_alt() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilSensor.pressure_alt)
  return pressure_alt_;
}
inline void HilSensor::set_pressure_alt(float value) {
  set_has_pressure_alt();
  pressure_alt_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilSensor.pressure_alt)
}

// optional float temperature = 14;
inline bool HilSensor::has_temperature() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void HilSensor::set_has_temperature() {
  _has_bits_[0] |= 0x00002000u;
}
inline void HilSensor::clear_has_temperature() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void HilSensor::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
inline float HilSensor::temperature() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilSensor.temperature)
  return temperature_;
}
inline void HilSensor::set_temperature(float value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilSensor.temperature)
}

// required uint32 fields_updated = 15;
inline bool HilSensor::has_fields_updated() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void HilSensor::set_has_fields_updated() {
  _has_bits_[0] |= 0x00004000u;
}
inline void HilSensor::clear_has_fields_updated() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void HilSensor::clear_fields_updated() {
  fields_updated_ = 0u;
  clear_has_fields_updated();
}
inline ::google::protobuf::uint32 HilSensor::fields_updated() const {
  // @@protoc_insertion_point(field_get:mavlink.msgs.HilSensor.fields_updated)
  return fields_updated_;
}
inline void HilSensor::set_fields_updated(::google::protobuf::uint32 value) {
  set_has_fields_updated();
  fields_updated_ = value;
  // @@protoc_insertion_point(field_set:mavlink.msgs.HilSensor.fields_updated)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace mavlink

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HilSensor_2eproto__INCLUDED
